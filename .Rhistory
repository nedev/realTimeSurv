help(require)
help(lgcpST)
parallel::makeCluster(4)
cl <- parallel::makeCluster(4)
parallel::clusterEvalQ(cl,library(realTimeSurv))
clusterEvalQ(cl, .libPaths())
parallel::clusterEvalQ(cl, .libPaths())
parallel::stopCluster(cl)
.libPaths("C:/docs/R")
devtools::install_github("samuel-watson/realTimeSurv") #install current version of the package
require(realTimeSurv)
require(sp)
require(rgdal)
require(ggplot2)
bham = readOGR(dsn="C:/docs/cov0036/bham-polygon.shp", layer="bham-polygon")
bham@data$id = rownames(bham@data)
bham.points = fortify(bham, region="id")
bham.df = plyr::join(bham.points, bham@data, by="id")
boundary <- inlabru::spoly(bham.df, crs=CRS("+proj=utm +zone=32N +datum=WGS84"))
bham_lsoa = rgdal::readOGR(dsn="C:/docs/cov0036/bham_lsoa_shp.shp")
out <- infecSim(boundary,
c(10,30),
bham_lsoa,
30,
1/30,
c(0.01,4),
rho=3,
t.off = 4,
cov.pars = c(0.9,0.03,0.1))
df1 <- out[[2]]
df1 <- df1[df1$t %in% 1:7,]
lg1 <- lgcp(data=df1,
pop.var = 'popdens',
boundary=boundary,
covariates=bham_lsoa,
cellwidth = 0.01,
laglength=7,
dirname="C:/docs/cov0036/test/packagetest",
mala.pars = c(100,50,1),
nchains = 4,
lib="C:/docs/R")
help(lgcp)
lgcp
.libPaths("C:/docs/R")
devtools::install_github("samuel-watson/realTimeSurv") #install current version of the package
require(realTimeSurv)
require(sp)
require(rgdal)
require(ggplot2)
bham = readOGR(dsn="C:/docs/cov0036/bham-polygon.shp", layer="bham-polygon")
bham@data$id = rownames(bham@data)
bham.points = fortify(bham, region="id")
bham.df = plyr::join(bham.points, bham@data, by="id")
boundary <- inlabru::spoly(bham.df, crs=CRS("+proj=utm +zone=32N +datum=WGS84"))
bham_lsoa = rgdal::readOGR(dsn="C:/docs/cov0036/bham_lsoa_shp.shp")
out <- infecSim(boundary,
c(10,30),
bham_lsoa,
30,
1/30,
c(0.01,4),
rho=3,
t.off = 4,
cov.pars = c(0.9,0.03,0.1))
df1 <- out[[2]]
df1 <- df1[df1$t %in% 1:7,]
lg1 <- lgcp(data=df1,
pop.var = 'popdens',
boundary=boundary,
covariates=bham_lsoa,
cellwidth = 0.01,
laglength=7,
dirname="C:/docs/cov0036/test/packagetest",
mala.pars = c(100,50,1),
nchains = 4,
lib="C:/docs/R")
.libPaths("C:/docs/R")
devtools::install_github("samuel-watson/realTimeSurv") #install current version of the package
require(realTimeSurv)
require(sp)
require(rgdal)
require(ggplot2)
bham = readOGR(dsn="C:/docs/cov0036/bham-polygon.shp", layer="bham-polygon")
bham@data$id = rownames(bham@data)
bham.points = fortify(bham, region="id")
bham.df = plyr::join(bham.points, bham@data, by="id")
boundary <- inlabru::spoly(bham.df, crs=CRS("+proj=utm +zone=32N +datum=WGS84"))
bham_lsoa = rgdal::readOGR(dsn="C:/docs/cov0036/bham_lsoa_shp.shp")
out <- infecSim(boundary,
c(10,30),
bham_lsoa,
30,
1/30,
c(0.01,4),
rho=3,
t.off = 4,
cov.pars = c(0.9,0.03,0.1))
df1 <- out[[2]]
df1 <- df1[df1$t %in% 1:7,]
lg1 <- lgcp(data=df1,
pop.var = 'popdens',
boundary=boundary,
covariates=bham_lsoa,
cellwidth = 0.01,
laglength=7,
dirname="C:/docs/cov0036/test/packagetest",
mala.pars = c(100,50,1),
nchains = 4,
lib="C:/docs/R")
class(lg1)
plot(lg1,bham_lsoa)
help(plot_hotspot)
plot_hotspot(lg1,
covariates=bham_lsoa,
threshold.var=c('poppp+obs+latent'),
threshold.value = c(0.5),
labels = c('low','high'),
osm = TRUE)
plot_hotspot(lg1,
covariates=bham_lsoa,
threshold.var=c('latent'),
threshold.value = c(1.5),
labels = c('low','high'),
osm = TRUE)
summary(lg1)
summary(lg1,plot=T)
vpc(lg1)
help(vpc)
vpc(lg1,bham_lsoa)
spplot(bham_lsoa)
geocode_st <- function(df,api_key){
if(!"address"%in%tolower(colnames(df)))stop("Column name for addresses should be 'Address' or 'address'")
if(!"date"%in%tolower(colnames(df)))stop("Column name for dates should be 'Date' or 'date'")
addrs <- df[,which(tolower(colnames(df))=="address")]
addrs <- as.character(addrs)
dts <- df[,which(tolower(colnames(df))=="date")]
dts <- lubridate::dmy(dts)
dts <- as.numeric(dts)
dts <- dts - (min(dts)-1)
data <- data.frame(lat=rep(NA,nrow(df)),
long=rep(NA,nrow(df)),
t=dts)
cat("\nProcessing addresses...\n")
nmat <- 0
nnomat <- 0
for(i in 1:length(addrs)){
if(addrs[i]!="NULL"){
add <- tryCatch(googleway::geocode_coordinates(googleway::google_geocode(addrs[i], key=api_key)),
error = function(e)NA)
if(length(add)>1){
data$lat[i] <- add$lat[1]
data$long[i] <- add$lng[1]
nmat <- nmat + 1
} else {
nnomat <- nnomat + 1
}
}
cat("\rAddresses: ",nmat," matched; ",nnomat," unable to match, of ",length(addrs)," total.");flush.console()
}
return(data)
}
data
rm(list=ls())
load("C:/docs/cov0036/newdataout3.RData")
head(data)
geocode_st <- function(df,api_key){
if(!"address"%in%tolower(colnames(df)))stop("Column name for addresses should be 'Address' or 'address'")
if(!"date"%in%tolower(colnames(df)))stop("Column name for dates should be 'Date' or 'date'")
addrs <- df[,which(tolower(colnames(df))=="address")]
addrs <- as.character(addrs)
dts <- df[,which(tolower(colnames(df))=="date")]
dts <- lubridate::dmy(dts)
dts <- as.numeric(dts)
dts <- dts - (min(dts)-1)
data <- data.frame(lat=rep(NA,nrow(df)),
long=rep(NA,nrow(df)),
t=dts)
cat("\nProcessing addresses...\n")
nmat <- 0
nnomat <- 0
for(i in 1:length(addrs)){
if(addrs[i]!="NULL"){
add <- tryCatch(googleway::geocode_coordinates(googleway::google_geocode(addrs[i], key=api_key)),
error = function(e)NA)
if(length(add)>1){
data$lat[i] <- add$lat[1]
data$long[i] <- add$lng[1]
nmat <- nmat + 1
} else {
nnomat <- nnomat + 1
}
}
cat("\rAddresses: ",nmat," matched; ",nnomat," unable to match, of ",length(addrs)," total.");flush.console()
}
return(data)
}
names(data)
tmp <- data[1:10,c('Address','Admission.date')]
tmp
colnames(tmp)[2] <- "date"
tmp$date <- substr(tmp$date,1,10)
tmp
geocode_st(tmp)
geocode_st(tmp, api_key = "AIzaSyB6kFC4evgOoCcHSuMknnUyLp9mthI3fn0")
tmp <- data.frame(address=c("Buckingham palace","Big ben","Marble arch"),
date = c("01/01/2020","02/01/2020","03/01/2020"))
geocode_st(tmp, api_key = "AIzaSyB6kFC4evgOoCcHSuMknnUyLp9mthI3fn0")
tmp <- data.frame(address=c("Buckingham palace","Big ben, Westminster","Marble arch, London"),
date = c("01/01/2020","02/01/2020","03/01/2020"))
geocode_st(tmp, api_key = "AIzaSyB6kFC4evgOoCcHSuMknnUyLp9mthI3fn0")
bhamshp2
summary()
load("C:/docs/cov0036/newdataout3.RData")
add
rm(add)
require(sp)
bhamshp2
.libPaths("C:/docs/R")
require(sp)
bhamshp2
rm(list=ls()[!ls()%in%c('bham_lsoa_shp','bham_msoa_shp','bhamward','bhamshp2')])
bham_ward_shp <- bhamward
rm(bhamward)
bham_sp_data <- bhamshp2
rm(bhamshp2)
save.image("C:/docs/cov0036/bham_data.RData")
tmp <- data.frame(address=c("Buckingham palace","Big ben, Westminster","Marble arch, London"),
date = c("01/01/2020","02/01/2020","03/01/2020"))
tmp
tmp <- data.frame(address=c("Buckingham palace","Big ben, Westminster","Marble arch, London"),
date = c("01/01/2020","02/01/2020","03/01/2020"))
geocode_st(tmp, api_key = "AIzaSyB6kFC4evgOoCcHSuMknnUyLp9mthI3fn0")
geocode_st <- function(df,api_key){
if(!"address"%in%tolower(colnames(df)))stop("Column name for addresses should be 'Address' or 'address'")
if(!"date"%in%tolower(colnames(df)))stop("Column name for dates should be 'Date' or 'date'")
addrs <- df[,which(tolower(colnames(df))=="address")]
addrs <- as.character(addrs)
dts <- df[,which(tolower(colnames(df))=="date")]
dts <- lubridate::dmy(dts)
dts <- as.numeric(dts)
dts <- dts - (min(dts)-1)
data <- data.frame(lat=rep(NA,nrow(df)),
long=rep(NA,nrow(df)),
t=dts)
cat("\nProcessing addresses...\n")
nmat <- 0
nnomat <- 0
for(i in 1:length(addrs)){
if(addrs[i]!="NULL"){
add <- tryCatch(googleway::geocode_coordinates(googleway::google_geocode(addrs[i], key=api_key)),
error = function(e)NA)
if(length(add)>1){
data$lat[i] <- add$lat[1]
data$long[i] <- add$lng[1]
nmat <- nmat + 1
} else {
nnomat <- nnomat + 1
}
}
cat("\rAddresses: ",nmat," matched; ",nnomat," unable to match, of ",length(addrs)," total.");flush.console()
}
return(data)
}
tmp <- data.frame(address=c("Buckingham palace","Big ben, Westminster","Marble arch, London"),
date = c("01/01/2020","02/01/2020","03/01/2020"))
geocode_st(tmp, api_key = "AIzaSyB6kFC4evgOoCcHSuMknnUyLp9mthI3fn0")
df <- geocode_st(tmp, api_key = "AIzaSyB6kFC4evgOoCcHSuMknnUyLp9mthI3fn0")
df
load("C:/docs/cov0036/newdataout3.RData")
rm(list=ls()[!ls()%in%c('bham_lsoa_shp','bham_msoa_shp','bham_ward_shp','bham_sp_data','boundary')])
save.image("C:/docs/cov0036/bham_data.RData")
lubridate::wday()
help(wday)
wday(ymd(080101))
require(lubridate)
wday(ymd(080101))
day(ymd(080101))
i
tmp <- data.frame(address=c("Buckingham palace","Big ben, Westminster","Marble arch, London"),
date = c("01/01/2020","02/01/2020","05/01/2020"))
tmp$date
dts <- dmy(tmp$date)
dts
min(dts)
min(dts):max(dts)
as.Date(min(dts):max(dts))
seq(min(dts),max(dts))
seq(min(dts),max(dts),by=1)
get_day <- function(df){
if(!"date"%in%tolower(colnames(df)))stop("Column name for dates should be 'Date' or 'date'")
dts <- df[,which(tolower(colnames(df))=="date")]
dts <- lubridate::dmy(dts)
dts2 <- as.numeric(dts)
dts2 <- dts2 - (min(dts2)-1)
data_t <- data.frame(t = min(dts):max(dts),
day = lubridate::dmy(seq(min(dts),max(dts),by=1)))
return(data_t)
}
get_day(tmp)
tmp
get_day <- function(df){
if(!"date"%in%tolower(colnames(df)))stop("Column name for dates should be 'Date' or 'date'")
dts <- df[,which(tolower(colnames(df))=="date")]
dts <- lubridate::dmy(dts)
dts2 <- as.numeric(dts)
dts2 <- dts2 - (min(dts2)-1)
data_t <- data.frame(t = min(dts2):max(dts2),
day = lubridate::dmy(seq(min(dts),max(dts),by=1)))
return(data_t)
}
tmp
get_day(tmp)
get_day <- function(df){
if(!"date"%in%tolower(colnames(df)))stop("Column name for dates should be 'Date' or 'date'")
dts <- df[,which(tolower(colnames(df))=="date")]
dts <- lubridate::dmy(dts)
dts2 <- as.numeric(dts)
dts2 <- dts2 - (min(dts2)-1)
data_t <- data.frame(t = min(dts2):max(dts2),
day = lubridate::ymd(seq(min(dts),max(dts),by=1)))
return(data_t)
}
get_day(tmp)
data_t <- data.frame(t = min(dts2):max(dts2),
day = lubridate::wday(lubridate::ymd(seq(min(dts),max(dts),by=1)),labels=TRUE))
get_day <- function(df){
if(!"date"%in%tolower(colnames(df)))stop("Column name for dates should be 'Date' or 'date'")
dts <- df[,which(tolower(colnames(df))=="date")]
dts <- lubridate::dmy(dts)
dts2 <- as.numeric(dts)
dts2 <- dts2 - (min(dts2)-1)
data_t <- data.frame(t = min(dts2):max(dts2),
day = lubridate::wday(lubridate::ymd(seq(min(dts),max(dts),by=1)),labels=TRUE))
return(data_t)
}
get_day(tmp)
get_day <- function(df){
if(!"date"%in%tolower(colnames(df)))stop("Column name for dates should be 'Date' or 'date'")
dts <- df[,which(tolower(colnames(df))=="date")]
dts <- lubridate::dmy(dts)
dts2 <- as.numeric(dts)
dts2 <- dts2 - (min(dts2)-1)
data_t <- data.frame(t = min(dts2):max(dts2),
day = lubridate::wday(lubridate::ymd(seq(min(dts),max(dts),by=1)),label=TRUE))
return(data_t)
}
get_day(tmp)
rm(list=ls())
load("C:/docs/cov0036/newdataout3.RData")
for(i in 1:8){
cat("\n",i,"\n")
twin <- c((18524+i):(18524+i-14))
df1 <- data[as.numeric(data$admit)%in%twin,c('long','lat','admit')]
colnames(df1) <- c('x','y','t')
data.t <- data.frame(t=as.numeric(df1$t)-max(as.numeric(df1$t))+14,
dow=data[as.numeric(data$admit)%in%twin,c('dow')])
data.t <- data.t[sapply(1:14,match,data.t$t),]
if(any(is.na(data.t$t))){
data.t$t <- 1:14
idx1 <- which(!is.na(data.t$dow))[1]
idx2 <- match(data.t$dow[idx1],dayweek)
data.t$dow <- rep(dayweek,4)[(7 + idx2-1):(7 + (idx2-1) + 13)]
}
lg0 <- lgcp(data=df1,
data.t = data.t,
sp.covs=c('prp_v65','prp_wht','imd_dec'),
t.covs = "dow",
pop.var = "popdens",
boundary=boundary2,
covariates=bhamshp2,
cellwidth=0.005,
laglength = 14,
prevRun = get(paste0("lg",i+179)),
dirname=paste0("C:/docs/cov0036/bhamout/bham2.",192+i))
assign(paste0("lh",i+180),lg0)
save.image("C:/docs/cov0036/newdataout3.RData")
}
.libPaths("C:/docs/R")
require(rgdal)
require(rgeos)
require(ggplot2)
require(maptools)
require(plyr)
require(stpp)
require(foreach,lib="C:/docs/R")
require(INLA, lib="C:/docs/R")
require(rgdal)
require(raster)
require(spatstat)
require(rgeos)
require(ggplot2)
require(maptools)
require(stpp)
require(lgcp, lib="C:/docs/R")
require(inlabru, lib="C:/docs/R")
require(pbapply, lib="C:/docs/R")
require(ncdf4)
for(i in 1:8){
cat("\n",i,"\n")
twin <- c((18524+i):(18524+i-14))
df1 <- data[as.numeric(data$admit)%in%twin,c('long','lat','admit')]
colnames(df1) <- c('x','y','t')
data.t <- data.frame(t=as.numeric(df1$t)-max(as.numeric(df1$t))+14,
dow=data[as.numeric(data$admit)%in%twin,c('dow')])
data.t <- data.t[sapply(1:14,match,data.t$t),]
if(any(is.na(data.t$t))){
data.t$t <- 1:14
idx1 <- which(!is.na(data.t$dow))[1]
idx2 <- match(data.t$dow[idx1],dayweek)
data.t$dow <- rep(dayweek,4)[(7 + idx2-1):(7 + (idx2-1) + 13)]
}
lg0 <- lgcp(data=df1,
data.t = data.t,
sp.covs=c('prp_v65','prp_wht','imd_dec'),
t.covs = "dow",
pop.var = "popdens",
boundary=boundary2,
covariates=bhamshp2,
cellwidth=0.005,
laglength = 14,
prevRun = get(paste0("lg",i+179)),
dirname=paste0("C:/docs/cov0036/bhamout/bham2.",192+i))
assign(paste0("lh",i+180),lg0)
save.image("C:/docs/cov0036/newdataout3.RData")
}
help("exponentialCovFct")
help("maternCovFct15")
help("maternCovFct25")
sessionInfo()
rm(list=ls())
lsoa <- readOGR(dsn="C:/docs/cov0036/lsoa.shp")
save.image("C:/docs/cov0036/lsoa.RData")
get_day <- function(df){
if(!"date"%in%tolower(colnames(df)))stop("Column name for dates should be 'Date' or 'date'")
dts <- df[,which(tolower(colnames(df))=="date")]
dts <- lubridate::dmy(dts)
dts2 <- as.numeric(dts)
dts2 <- dts2 - (min(dts2)-1)
data_t <- data.frame(t = min(dts2):max(dts2),
day = lubridate::wday(lubridate::ymd(seq(min(dts),max(dts),by=1)),label=TRUE))
return(data_t)
}
tmp <- data.frame(address=c("Buckingham palace","Big ben, Westminster","Marble arch, London"),
date = c("01/01/2020","02/01/2020","05/01/2020"))
get_day(tmp)
tmp <- data.frame(address=c("Buckingham palace","Big ben, Westminster","Marble arch, London"),
date = c("01/01/2020","02/01/2020","03/01/2020"))
get_day(tmp)
rm(list=ls())
.libPaths("C:/docs/R")
devtools::install_github("samuel-watson/realTimeSurv")
require(realTimeSurv)
realTimeSurv::geocode_st
.libPaths("C:/docs/R")
devtools::install_github("samuel-watson/realTimeSurv")
.libPaths("C:/docs/R")
devtools::install_github("samuel-watson/realTimeSurv")
.libPaths("C:/docs/R")
devtools::document()
.libPaths("C:/docs/R")
devtools::document()
########################################
# Analysis of Birmingham
#
# v 1.0
########################################
.libPaths("C:/docs/R")
require(realTimeSurv)
require(sp)
require(mapview)
require(ggplot2)
load("C:/docs/cov0036/newdataout4.RData")
df
dfs
rm(panim,p1b,p2b,p3b,p4b,p5b,p6b,p7b,p8b,p9b,q1b,q2b,q3b,q4b,q5b,q6b,q7b,q8b,q9b)
rm(p5a,p6a,p8c)
rm(p1)
rm(outl)
save.image("C:/docs/cov0036/newdataout4.RData")
gc()
help(untar)
untar("C:/Users/watsonsi/Downloads/bham_data.gz")
help(g\file)
help(gzfile)
gzfile("C:/Users/watsonsi/Downloads/bham_data.gz")
load(gzfile("C:/Users/watsonsi/Downloads/bham_data.gz"))
case_data <- data.frame(address=c("1 High Street Birmingham B1 1AA"),
date=c("30/11/2020"))
.libPaths("C:/docs/R")
require(realTimeSurv)
df <- geocode_st(case_data, api_key = "AIzaSyB6kFC4evgOoCcHSuMknnUyLp9mthI3fn0")
df
googleway::google_geocode(case_data$address[1], key="AIzaSyB6kFC4evgOoCcHSuMknnUyLp9mthI3fn0")
typeof(case_data$address)
typeof(as.factor(case_data$address))
help(as.Date)
format(Sys.Date(), "%a %b %d")
format(Sys.Date(), "%Y %m %d")
format(Sys.Date(), "%Y-%m-%d")
as.Date(Sys.Date(), "%Y-%m-%d")
formate(as.Date(Sys.Date(), "%Y-%m-%d"),"%d-%m-%Y")
format(as.Date(Sys.Date(), "%Y-%m-%d"),"%d-%m-%Y")
lubridate::dmy(format(as.Date(Sys.Date(), "%Y-%m-%d"),"%d-%m-%Y"))
.libPaths("C:/docs/R")
lubridate::dmy(format(as.Date(Sys.Date(), "%Y-%m-%d"),"%d-%m-%Y"))
help(dmy)
Sys.date()
Sys.Date()
Sys.Date()-1
lubridate::dmy(format(as.Date(c(Sys.Date()-1:10), "%Y-%m-%d"),"%d-%m-%Y"))
as.numeric(lubridate::dmy(format(as.Date(c(Sys.Date()-1:10), "%Y-%m-%d"),"%d-%m-%Y")))
as.numeric(format(as.Date(c(Sys.Date()-1:10), "%Y-%m-%d"),"%d-%m-%Y"))
